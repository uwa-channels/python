name: CI

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  auto-tag:
    name: Auto Tag If Needed
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write

    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_created: ${{ steps.set_tag.outputs.tag_created }}

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          version=$(grep -Po '(?<=^version = ")[^"]+' pyproject.toml)
          echo "Version found: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: check_tag
        run: |
          git fetch --tags
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag already exists."
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag does not exist."
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag (if missing)
        id: set_tag
        run: |
          if [ "${{ steps.check_tag.outputs.tag_exists }}" = "false" ]; then
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag "v${{ steps.get_version.outputs.version }}"
            git push origin "v${{ steps.get_version.outputs.version }}"
            echo "tag_created=true" >> $GITHUB_OUTPUT
          else
            echo "tag_created=false" >> $GITHUB_OUTPUT
          fi


  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Unit test
        run: |
          pip install pytest pytest-cov pytest-benchmark
          PYTHONPATH=src pytest --cov --cov-report xml:coverage.xml
      - uses: codecov/codecov-action@v4
        if: contains(matrix.python-version, '3.13')
        with:
          file: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Run performance benchmark
        if: contains(matrix.python-version, '3.13')
        run: |
          mkdir -p benchmarks
          if [[ "${GITHUB_REF}" == "refs/tags/perf-baseline" ]]; then
            PYTHONPATH=src pytest tests/ --benchmark-save=baseline --benchmark-save-data --benchmark-storage=./benchmarks
          else
            PYTHONPATH=src pytest tests/ --benchmark-compare=baseline --benchmark-compare-fail=min:10% --benchmark-storage=./benchmarks || true
          fi
      - name: Upload benchmark data (only on main)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-data
          path: benchmarks/


  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install build dependencies
        run: pip install build
      - name: Build package
        run: python -m build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/


  github-release:
    name: Sign and upload to GitHub Release
    if: needs.auto-tag.outputs.tag_created == 'true'
    needs: [auto-tag, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: |
            dist/*.tar.gz
            dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          "v${{ needs.auto-tag.outputs.version }}"
          --repo "$GITHUB_REPOSITORY"
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          "v${{ needs.auto-tag.outputs.version }}" dist/*
          --repo "$GITHUB_REPOSITORY"


  publish-to-testpypi:
    name: Publish Python distribution to TestPyPI
    if: needs.auto-tag.outputs.tag_created == 'true'
    needs: [auto-tag, build]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/uwa-replay
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
